// schema.prisma

generator client {
  provider = "prisma-client-js"
}

datasource db {
    provider     = "cockroachdb"
    url          = env("DATABASE_URL")
    relationMode = "prisma"
}

model Account {
    id                 String  @id @default(cuid())
    userId             String  @map("user_id")
    type               String
    provider           String
    providerAccountId  String  @map("provider_account_id")
    refresh_token      String? 
    access_token       String? 
    expires_at         Int?
    token_type         String?
    scope              String?
    id_token           String? 
    session_state      String?
    oauth_token_secret String?
    oauth_token        String?

    user User @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@unique([provider, providerAccountId])
    @@index([userId])
}


model Session {
    id           String   @id @default(cuid())
    sessionToken String   @unique @map("session_token")
    expires      DateTime
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
    userId       String   @map("user_id")

    @@index([userId])
}

model User {
  id            String    @id @default(uuid())
  email         String    @unique
  password      String?
  name          String?
  bio           String?
  website       String?
  gender        String?
  username      String?   @unique
  image         String?
  emailVerified Boolean?  @default(false)
  posts         Post[]
  comments      Comment[]
  likes         Like[]
  accounts      Account[]
  sessions      Session[]
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
}



model Post {
  id          String       @id @default(uuid())
  title       String
  content     String
  summary     String
  published   Boolean      @default(false)
  authorId    String
  slug        String       @unique
  author      User         @relation(fields: [authorId], references: [id])
  categories  Category[]   
  tags        Tag[]        
  comments    Comment[]
  likes       Like[]
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt
  fileUrl     String?

  @@index([authorId])
}

model Category {
  id    String  @id @default(uuid())
  name  String  @unique
  posts Post[]  

  @@index([name])
}

model Tag {
  id    String  @id @default(uuid())
  name  String  @unique
  posts Post[]  

  @@index([name])
}

model Comment {
  id        String   @id @default(uuid())
  content   String
  authorId  String
  postId    String
  author    User     @relation(fields: [authorId], references: [id])
  post      Post     @relation(fields: [postId], references: [id])
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([authorId])
  @@index([postId])
}

model Like {
  id        String   @id @default(uuid())
  userId    String
  postId    String
  user      User     @relation(fields: [userId], references: [id])
  post      Post     @relation(fields: [postId], references: [id])
  createdAt DateTime @default(now())

  @@index([userId])
  @@index([postId])
  @@unique([userId, postId])
}